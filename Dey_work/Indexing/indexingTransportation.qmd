---
title: "Index for Transportation at each level"
author: Dereje
format: pdf
---

I used Minas approach for creating the index at each level
```{r setup, include=F}
knitr::opts_chunk$set(echo = F, message=FALSE, warning=FALSE)
options(scipen = 5)
library(tidyverse)
library(stargazer)
library(corrplot)
library(patchwork)
library(tigris)
library(sf)
library(factoextra)
library(kableExtra)
```


```{r}
# Condition labels and baseline scores
Condition  <- c("Ideal", "Good", "Average", "Poor", "Terrible")
Cond_Value <- c(100, 75, 50, 25, 0)

# Breakpoints for each variable
ACT <- c(17, 7, 3.5, 1.2, 0)       # Walk/Bike to Work
CAR <- c(50, 65, 76, 82, 90)       # Drive Alone to Work
PUB <- c(10, 5, 2, 0.5, 0)         # Uses Public Transit
NVC <- c(0, 4, 8.5, 15, 25)        # Households Without Vehicle
TRV <- c(15, 20, 26.4, 30, 35)     # Travel Time to Work
EKW <- c(16, 13, 9, 6, 3)          # Walkability Index

# Combine into a data frame
TransportBaselines <- data.frame(
  Condition, Cond_Value,
  ACT, CAR, PUB, NVC, TRV, EKW
)
# Save as CSV
write.csv(TransportBaselines, "baselines.csv", row.names = FALSE)

kable(TransportBaselines)
```


```{r, fig.height=3, fig.width=15}
vars_cond <- c("ACT", "CAR", "PUB", "NVC", "TRV")

cond_plots <- map(vars_cond, ~{
  cdvar <- .x
  
  ggplot(data=TransportBaselines, aes_string(x=cdvar, y='Cond_Value')) +
    geom_line() +
    geom_point() +
    labs(title=paste(cdvar, "Score"), x=paste(cdvar, "Value"), y="Condition Score") + scale_x_continuous(limits = c(0,NA))
})

wrap_plots(cond_plots, ncol=5, nrow=1)
```


Using Minas Code here again
```{r}

# baseline_df: data frame with baseline explanatory variables and Cond_Value
# target_df: data frame where you want interpolated values
# vars_cond: character vector of variable names
# scores_only: Only includes interpolated scores and not the original values
# remove_suffix: removes the ending _CondScore
# add_index: includes the index in final table
# ind_name: name index column

interpolate_scores <- function(
    baseline_df, target_df, vars_cond,
    scores_only = TRUE, remove_suffix = TRUE,
    add_index = TRUE, ind_name = "Index"
) {
  
  for (var in vars_cond) {
    
    # Baseline values
    baseline_x <- baseline_df[[var]]
    baseline_y <- baseline_df$Cond_Value
    valid_rows <- !is.na(baseline_x) & !is.na(baseline_y)
    
    # Interpolation function
    interp_fun <- approxfun(
      x = baseline_x[valid_rows], 
      y = baseline_y[valid_rows], 
      rule = 2
    )
    
    # New column name
    new_colname <- paste0(var, "_CondScore")
    
    # Apply interpolation
    target_df[[new_colname]] <- interp_fun(target_df[[var]])
  }
  
  # Keep only scores if requested, but preserve name & GEOID
  if (scores_only) {
    keep_cols <- c( "Layer", "Name", "GEOID", grep("_CondScore$", names(target_df), value = TRUE))
    target_df <- target_df %>%
      select(all_of(keep_cols))
    
    # Remove suffix if requested
    if (remove_suffix) {
      score_cols <- setdiff(names(target_df), c("Layer", "Name", "GEOID"))
      target_df <- target_df %>%
        rename_with(~ sub("_CondScore$", "", .x), all_of(score_cols))
    }
  }
  
  # Add average score if requested
  if (add_index) {
    score_cols <- setdiff(names(target_df), c("Layer", "Name", "GEOID"))
    target_df <- target_df %>%
      rowwise() %>%
      mutate(!!ind_name := mean(c_across(all_of(score_cols)), na.rm = TRUE)) %>%
      ungroup()
  }
  
  return(target_df)
}

```

# Indexing - Census Tracts

We start with the census tract layer.

```{r}
# Read headers and data
colenames <- names(read.csv("TransportationCensusTracts.csv", nrows = 0))
tracts <- read.csv("TransportationCensusTracts.csv", skip = 2, header = FALSE)
names(tracts) <- colenames

# rename date-stamped columns if needed
names(tracts)[5:10] <- c("ACT", "CAR", "PUB", "NVC", "TRV", "EKW")

# Get index
vars_cond <- c("ACT", "CAR", "PUB", "NVC", "TRV", "EKW")
tracts_index <- interpolate_scores(TransportBaselines, tracts, vars_cond) |>
  arrange(desc(Index))
```

```{r}
# Top 10 indexes
kable(head(tracts_index, 10), caption = "Top 10 indexes (by Census Tract)", digits=3)
```

```{r}
# Bottom 10 indexes
kable(tail(tracts_index, 10), caption = "Bottom 10 indexes (by Census Tract)", digits=3)
```
# Indexing - Cities and Towns
```{r}
#file orwhatever
# getting the data into readable format
colnames <- names(read.csv("TransportationCitiesAndTowns.csv",nrows=0))

# data wrangling blah blah blah
CNT <- read.csv("TransportationCitiesAndTowns.csv", skip=2, header=FALSE)
names(CNT) <- colnames
names(CNT)[5:10] <- c("ACT", "CAR", "PUB", "NVC", "TRV", "EKW") 

# data for the prelim analysis
CitiesAndTowns <- CNT |> select(-GEOID, -Name)
```

```{r}
# Get index using function we wrote above
CitiesAndTowns_index <- interpolate_scores(TransportBaselines, CNT, vars_cond)|> arrange(desc(Index))
```

```{r}
# Top 10 indexes
kable(head(CitiesAndTowns_index, 10), caption = "Top 10 indexes (by City or Town)", digits=3)
```

```{r}
# Bottom 10 indexes
kable(tail(CitiesAndTowns_index, 10), caption = "Bottom 10 indexes (by City or Town)", digits=3)
```

# Indexing - Zip Codes

```{r}
# getting the data into readable format
colnames <- names(read.csv("TransportationZIPCodes.csv",nrows=0))

# data wrangling 
zc <- read.csv("TransportationZIPCodes.csv", skip=2, header=FALSE)
names(zc) <- colnames
names(zc)[5:10] <- c("ACT", "CAR", "PUB", "NVC", "TRV", "EKW") # get rid of the stupid date things since they're all the same (see below)

# data for the prelim analysis
ZIPCodes <- zc |> select(-GEOID, -Name)
```

```{r}
# Get index using function we wrote above
ZIPCodes_index <- interpolate_scores(TransportBaselines, zc, vars_cond)|> arrange(desc(Index))
```

```{r}
# Top 10 indexes
kable(head(ZIPCodes_index, 10), caption = "Top 10 indexes (by Zip Code)", digits=3)
```

```{r}
# Bottom 10 indexes
kable(tail(ZIPCodes_index, 10), caption = "Bottom 10 indexes (by Zip Code)", digits=3)
```

# Indexing - Counties

```{r}
#file orwhatever
# getting the data into readable format
colnames <- names(read.csv("TransportationCounties.csv",nrows=0))

# data wrangling blah blah blah
cntz <- read.csv("TransportationCounties.csv", skip=2, header=FALSE)
names(cntz) <- colnames
names(cntz)[5:10] <- c("ACT", "CAR", "PUB", "NVC", "TRV", "EKW") # get rid of the stupid date things since they're all the same (see below)

# data for the prelim analysis
Counties <- cntz |> select(-GEOID, -Name)
```

```{r}
# Get index using function we wrote above
Counties_index <- interpolate_scores(TransportBaselines, cntz, vars_cond)|> arrange(desc(Index))
Counties_index |> kable(caption = "Indexes (by County)")
```


# Indexing - Regions

```{r}
# getting the data into readable format
colnames <- names(read.csv("TransportationRegions.csv",nrows=0))

# data wrangling blah blah blah
rgns <- read.csv("TransportationRegions.csv", skip=2, header=FALSE)
names(rgns) <- colnames
names(rgns)[5:10] <- c("ACT", "CAR", "PUB", "NVC", "TRV", "EKW") # get rid of the stupid date things since they're all the same (see below)

# data for the prelim analysis
Regions <- rgns |> select(-GEOID, -Name)
```

```{r}
# Get index using function we wrote above
Regions_index<- interpolate_scores(TransportBaselines, rgns, vars_cond)|> arrange(desc(Index))
Regions_index |> kable(caption = "Indexes (by Region)")
```

```{r}
# change GEOID and stuff to be a chr string so they can be put into bind_rows
tracts_index <- tracts_index |> mutate(GEOID = as.character(GEOID))
CitiesAndTowns_index <- CitiesAndTowns_index |> mutate(GEOID = as.character(GEOID))
Counties_index <- Counties_index |> mutate(GEOID = as.character(GEOID))
ZIPCodes_index <- ZIPCodes_index |> mutate(GEOID = as.character(GEOID)) |> mutate(Name = as.character(Name))
```

```{r}
# bind all the indexes together and export as csv
index_final <- bind_rows(tracts_index, CitiesAndTowns_index, Counties_index, ZIPCodes_index, Regions_index)
write.csv(index_final, file = "/Users/derejepollock/R Studio Projects/FVDE/Dey_work/Indexing/Reliable_Transportation_indexes.csv", row.names = FALSE)
```


```{r}

ReliableTransportationIndexes <- index_final 
# add 2 more columns with topic and period 
ReliableTransportationIndexes <- ReliableTransportationIndexes %>%
  mutate(topic = "FVDESVYF", stratification = "", period = "2022-2023")

ReliableTransportationIndexes <- ReliableTransportationIndexes %>% select(-ACT, -Name, -CAR, -PUB, -NVC, -TRV, -EKW)

#change names of some columns 
ReliableTransportationIndexes <- ReliableTransportationIndexes %>%
  rename(value = Index, geoid = GEOID, layer = Layer)

# change order if columns 
ReliableTransportationIndexes <- ReliableTransportationIndexes %>%
  select(layer, geoid, topic, stratification, period, value)

# write to a csv file to be sent to susan
write.csv(ReliableTransportationIndexes, file = "/Users/derejepollock/R Studio Projects/FVDE/Dey_work/Indexing/reliable_transportation_indexes_formated.csv", row.names = FALSE)
```







